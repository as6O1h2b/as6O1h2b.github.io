{"version":3,"sources":["fee-calc/component.js","App.js","serviceWorker.js","index.js"],"names":["scaleNames","c","f","getTotalAmount","baseAmount","getBaseAmount","totalAmount","getTotalAmountEur","getBaseAmountEur","tryConvert","amount","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","AmountInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","e","onAmountChange","target","value","scale","react_default","a","createElement","className","onChange","placeholder","React","Component","Calculator","_this2","handleBaseAmountChange","handleFullAmountChange","state","currency","copied","setState","event","_this3","fees","toFixed","component_AmountInput","lib","text","onCopy","style","color","App","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91dd47ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport './fee-calc.css';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\nconst scaleNames = {\r\n    c: 'Target amount',\r\n    f: 'To be charged'\r\n};\r\n\r\nfunction getTotalAmount(baseAmount) {\r\n    return (baseAmount + 0.3) / (1 - 0.029);\r\n}\r\n\r\nfunction getBaseAmount(totalAmount) {\r\n    return (totalAmount - 0.3) * (1 - 0.029);\r\n}\r\n\r\nfunction getTotalAmountEur(baseAmount) {\r\n    return (baseAmount + 0.25) / (1 - 0.014);\r\n}\r\n\r\nfunction getBaseAmountEur(totalAmount) {\r\n    return (totalAmount - 0.25) * (1 - 0.014);\r\n}\r\n\r\nfunction tryConvert(amount, convert) {\r\n    const input = parseFloat(amount);\r\n    if (Number.isNaN(input)) {\r\n        return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n}\r\n\r\nclass AmountInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onAmountChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const amount = this.props.amount;\r\n        const scale = this.props.scale;\r\n        return (\r\n            <div className=\"inputContainer\">\r\n\r\n                <input value={amount}\r\n                       onChange={this.handleChange}\r\n                       className=\"input\"\r\n                       placeholder={scaleNames[scale]}/>\r\n                <p className={this.props.amount === '' ? \"hidden\" : \"amountLegend\"}>{scaleNames[scale]}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleBaseAmountChange = this.handleBaseAmountChange.bind(this);\r\n        this.handleFullAmountChange = this.handleFullAmountChange.bind(this);\r\n        this.state = {amount: '', scale: 'c', currency: 'USD', copied: false};\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n    }\r\n\r\n    handleBaseAmountChange(amount) {\r\n        this.setState({scale: 'c', amount: amount, copied: false});\r\n    }\r\n\r\n    handleFullAmountChange(amount) {\r\n        this.setState({scale: 'f', amount: amount, copied: false});\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({currency: event.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n        const scale = this.state.scale;\r\n        const amount = this.state.amount;\r\n        const currency = this.state.currency;\r\n\r\n        let baseAmount = scale === 'f' ? tryConvert(amount, getBaseAmount) : amount;\r\n        let totalAmount = scale === 'c' ? tryConvert(amount, getTotalAmount) : amount;\r\n\r\n        if (currency === 'EUR') {\r\n            baseAmount = scale === 'f' ? tryConvert(amount, getBaseAmountEur) : amount;\r\n            totalAmount = scale === 'c' ? tryConvert(amount, getTotalAmountEur) : amount;\r\n        }\r\n\r\n        let fees = Number.parseFloat(totalAmount - baseAmount).toFixed(2);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <AmountInput\r\n                    scale=\"c\"\r\n                    amount={baseAmount}\r\n                    onAmountChange={this.handleBaseAmountChange}\r\n                />\r\n                <div className=\"feeRow\">\r\n                    <CopyToClipboard text={fees} onCopy={() => this.setState({copied: true})}>\r\n                        <div className=\"feeContainer\">\r\n                                {fees}\r\n                        </div>\r\n                    </CopyToClipboard>\r\n                    <p className=\"amountLegend\">{this.state.copied ? <span style={{color: 'red'}}>Copied</span> : \"Fee\"}</p>\r\n                </div>\r\n\r\n                <AmountInput\r\n                    scale=\"f\"\r\n                    amount={totalAmount}\r\n                    onAmountChange={this.handleFullAmountChange}\r\n                  />\r\n                <div>\r\n                    <select value={this.state.value} onChange={this.handleChange} className=\"select-style\">\r\n                        <option value=\"USD\">USD</option>\r\n                        <option value=\"EUR\">EUR</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './fee-calc/component';\n\nclass App extends Component {\n    render() {\n        return (\n                <Calculator />\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}